rpois(5)
rpois(10,5)
hist(rpois(10,5))
hist(rpois(100,5))
hist(rpois(100,10))
hist(rpois(500,10))
plot(rpois(500,10))
hist(rpois(500,10),break=seq(0, 30, 1))
seq(0, 30, 1)
hist(rpois(500,10),breaks=seq(0, 30, 1))
hist(rpois(500,1),breaks=seq(0, 30, 1))
hist(rpois(500,5),breaks=seq(0, 30, 1))
hist(rpois(500,10),breaks=seq(0, 30, 1))
hist(rpois(500,20),breaks=seq(0, 30, 1))
hist(rpois(500,20),breaks=seq(0, 40, 1))
hist(rpois(500,1),breaks=seq(0, 30, 1))
hist(rpois(500,5),breaks=seq(0, 30, 1))
hist(rpois(500,10),breaks=seq(0, 30, 1))
hist(rpois(500,20),breaks=seq(0, 40, 1))
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab=expression(theta), ylab="f(x)")
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab=expression(theta), ylab="f(expression(theta))")
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab=expression(theta), ylab=paste0("f(",expression(theta)")")
hist(rpois(500,5),breaks=seq(0, 30, 1))
hist(rpois(500,10),breaks=seq(0, 30, 1))
hist(rpois(500,20),breaks=seq(0, 40, 1))
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab=expression(theta), ylab=paste0("f(",expression(theta),")")
hist(rpois(500,5),breaks=seq(0, 30, 1))
hist(rpois(500,10),breaks=seq(0, 30, 1))
hist(rpois(500,20),breaks=seq(0, 40, 1))
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab=expression(theta), ylab=paste0("f(",expression(theta),")"))
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab=x, ylab=f(x))
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)")
hist(rpois(500,5),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)")
hist(rpois(500,10),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)")
hist(rpois(500,20),breaks=seq(0, 40, 1), xlab="x", ylab="f(x)")
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
par(mar(1,1,1,1))
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
par(mar=c((1,1,1,1)))
par(mar=c(1,1,1,1))
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
par(mar=c(4,4,4,4))
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
par(mar=c(6,6,6,6))
hist(rpois(500,1),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
par(mar=c(5,5,5,5))
hist(rpois(500,5),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rpois(500,10),breaks=seq(0, 30, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rpois(500,20),breaks=seq(0, 40, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(nbinom(500, 100, 0.5, 200))
hist(rbinom(500, 100, 0.5, 200))
hist(rbinom(500, 100, 0.5))
hist(rbinom(500, 100, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rbinom(100, 100, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rbinom(50, 100, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rbinom(1000, 100, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rbinom(500, 10, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rbinom(500, 10, 0.6),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 10, 0.6),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 10, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(50, 10, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 10, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 10, 1.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 10, 0.1),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 10, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 1, 0.5),breaks=seq(0, 70, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 1, 0.5),breaks=seq(0,570, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 10, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 100, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 100, 0.5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 100, 0.5),breaks=seq(0,1000, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 100, 0.5),breaks=seq(0,150, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 50, 0.5),breaks=seq(0,150, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 50, 0.5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 10, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 50, 0.5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 100, 0.5),breaks=seq(0,150, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(500, 10, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 50, 0.5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 100, 0.5),breaks=seq(0,150, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(500, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(500, 5, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(500, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(500, 0.1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 10, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 50, 0.5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 100, 0.5),breaks=seq(0,150, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 50, 0.5),breaks=seq(0,150, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 10, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 5, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 20, 0.1),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,200, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 0.1),breaks=seq(0,200, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 1),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 10, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(100, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(100, 1, 0.5),breaks=seq(0,10, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.5),breaks=seq(0,10, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 10, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.5),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.5),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 1, 1),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.3),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.1),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.1),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.1),breaks=seq(0,100, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.1),breaks=seq(0,200, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.1),breaks=seq(0,150, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 10, 0.1),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 0.1),breaks=seq(0,050, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 0.1),breaks=seq(0,500, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 0.1),breaks=seq(0,200, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,250, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,300, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,400, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,2500, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,350, 1), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,350, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 0.1),breaks=seq(0,200, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 0.1),breaks=seq(0,250, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 5, 0.1),breaks=seq(0,150, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.1),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.1),breaks=seq(0,50, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.1),breaks=seq(0,70, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.1),breaks=seq(0,150, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 10, 0.1),breaks=seq(0,250, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,350, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 5, 0.1),breaks=seq(0,150, 5), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.1),breaks=seq(0,70, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.1),breaks=seq(0,150, 5), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 10, 0.1),breaks=seq(0,250, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,350, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 10, 0.1),breaks=seq(0,250, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 5, 0.1),breaks=seq(0,150, 5), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.1),breaks=seq(0,70, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.5),breaks=seq(0,70, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.7),breaks=seq(0,70, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.9),breaks=seq(0,70, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.2),breaks=seq(0,70, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.1),breaks=seq(0,70, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 1, 0.1),breaks=seq(0,70, 1), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 5, 0.1),breaks=seq(0,150, 5), xlab="x", ylab="f(x)", cex.lab=1.5)
hist(rnbinom(200, 10, 0.1),breaks=seq(0,250, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
hist(rnbinom(200, 20, 0.1),breaks=seq(0,350, 5), xlab="x", ylab="f(x)", cex.lab=1.5 )
basedirectory <- "C:/Users/solit/Documents/GitHub/Sicklefin-Redhorse-Analysis"
setwd(basedirectory)
list.of.packages <- c("stringr", "reshape2", "lubridate", "tidyverse", "rjags","jagsUI", "coda","parallel", "doParallel", "foreach")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
lapply(list.of.packages, require, character.only = TRUE)
raw.dat <- read.csv("Sicklefin_Capture_Data.csv")
raw.dat<-raw.dat[raw.dat$Sex!="Unknown",] # remove rows where Sex is "Unknown" (4 individuals), three of the fish do not have first capture record (ID: 300, 9974, 9988, 9989)
raw.dat <- raw.dat[raw.dat$Individual_ID!=303,] # remove ID 303 because it was captured by boat shocking in Valley
raw.dat$CollectDate<-strptime(raw.dat$CollectDate, format="%d-%b-%y") # convert date format
##############################
brasstown<-raw.dat[raw.dat$Waterbody!="Valley River",]
### Creating matrix of individual and tag type ("1" for HDX tags, and "0" for FDX-B tags)
# Convert tag type
brasstown$Tag_Type<-ifelse(brasstown$PIT_Type=="FDX-B",0,1) # if fish was tagged wtih FDX-B, cannot be detected by PIT antenna. If tagged with HDX tag, can be detected by antenna
tag.dat<-data.frame(with(brasstown, table(brasstown$Individual_ID, brasstown$Tag_Type, brasstown$CollectYear)))
tag.dat<-tag.dat[tag.dat$Freq>0,]
tag.dat<-spread(tag.dat, Var3, Var2)
coalesce_by_column <- function(df) {
return(coalesce(df[1], df[2]))
}
tag.dat<-tag.dat%>%
group_by(Var1) %>%
summarise_all(coalesce_by_column)
tag.dat<-data.frame(tag.dat[,3:7])
get.first<-function(x){min(which(!is.na(x)))}
f<-apply(tag.dat, 1, get.first)
for(i in 1:nrow(tag.dat)){
for(j in (f[i]+1):ncol(tag.dat)){
tag.dat[i,j]<-ifelse(tag.dat[i,j-1]==0, 0, 1)
}
}        # create matrix of individual detectability by PIT antenna based on the tag they received
# prepare tag data for model
tag.dat<-tag.dat[,1:5]
colnames(tag.dat)<-NULL
tag.dat[is.na(tag.dat)]<-0
tag.dat[6,5:ncol(tag.dat)]<-1 #new HDX tag added to this individual in 2018
tag.dat <- apply(tag.dat, 2, as.numeric)
View(cbind(sort(unique(brasstown$Individual_ID)),tag.dat))
### Prepare capture data for model
# organize data into pivot table
ms.dat<-dcast(brasstown, brasstown$Individual_ID+brasstown$CollectYear~brasstown$PriMethod)
ms.dat<-ms.dat[rowSums(ms.dat[,3:5])>0,] # keep rows where individual was captured at least once
for(i in 1:nrow(ms.dat)){
for(j in 3:ncol(ms.dat)){
if(ms.dat[i,j]>1){
ms.dat[i,j]<-1
}
}
} # transform capture records into 1s and 0s
# Turn capture record into gear used to capture individual (e.g. if caught by PIT array, denoted as "P")
ms.dat$`PIT Array`<-ifelse(ms.dat$`PIT Array`==1, "P", 0)
ms.dat$`Seining`<-ifelse(ms.dat$`Seining`==1, "S", 0)
ms.dat$`Trapping (Weir or Fyke)`<-ifelse(ms.dat$`Trapping (Weir or Fyke)`==1, "T", 0)
# Assign simpler column names
colnames(ms.dat)<-c("ID", "Year", "PIT", "Sein", "Trap")
# Using paste function to denote "state" of captured individual based on gear(s) with which it was captured
for(i in 1:nrow(ms.dat)){
for(j in 1:ncol(ms.dat)){
ms.dat[i,j]<-ifelse(ms.dat[i,j]==0, '', ms.dat[i,j])
}
ms.dat$state[i]<-paste(ms.dat[i,3:5], collapse='')
}
# Turn table into wide shape
ms.dat<-ms.dat%>%
spread(Year, state)
# extract capture history from table
ms.cap.hist<-ms.dat[,c(1,5:9)]
# combine multiple rows of the same individual
coalesce_by_column <- function(df) {
return(coalesce(df[1], df[2]))
}
ms.cap.hist<-ms.cap.hist%>%
group_by(ID) %>%
summarise_all(coalesce_by_column)
for (i in 1:nrow(ms.cap.hist)){
for (j in f[i]:ncol(ms.cap.hist)){
ms.cap.hist[i,j]<-ifelse(is.na(ms.cap.hist[i,j]), 1, ifelse(ms.cap.hist[i,j]=="S", 2, ifelse(ms.cap.hist[i,j]=="T", 3, ifelse(ms.cap.hist[i,j]=="P", 4,ifelse(ms.cap.hist[i,j]=="PT", 5, ifelse(ms.cap.hist[i,j]=="ST", 6, ms.cap.hist[i,j]))))))
}
}
brasstown.CH<-ms.cap.hist[,-1]
brasstown.CH<-apply(brasstown.CH, 2, as.numeric)
brasstown.CH<-as.matrix(brasstown.CH)
# Convert CJS capture history to CH for JS model
brasstown.CH[is.na(brasstown.CH)]<-1 # if NA, assign 1 for "not seen"
CH.du<-as.matrix(cbind(rep(1, dim(brasstown.CH)[1]), brasstown.CH)) # add extra (dummy) sampling occ in the beginning (Kerry and Schaub 2012)
colnames(CH.du)<-NULL
head(CH.du)
nz<-1500# augmented individuals
# augmenting individuals to original capture history
brasstown.CH.aug<-rbind(CH.du, matrix(1, ncol=dim(CH.du)[2], nrow=nz))
#augment PIT tag data
tag.dat.aug<-as.matrix(cbind(rep(0,dim(tag.dat)[1]), tag.dat))
tag.dat.aug<-rbind(tag.dat.aug, matrix(0, ncol=dim(tag.dat.aug)[2], nrow=nz))
# Known z values
z.known<-CH.du
n1<-n2<-rep(NA, nrow(CH.du))
for(i in 1:nrow(CH.du)){
n1<-min(which(CH.du[i,]>1))
n2<-max(which(CH.du[i,]>1))
z.known[i,n1:n2]<-2
for(j in 1:ncol(CH.du)){
z.known[i,j]<-ifelse(z.known[i,j]==1, NA, z.known[i,j])
}
}
z.known<-rbind(z.known, matrix(NA, ncol=dim(CH.du)[2], nrow=nz))
# Effor data
effort<-read.csv("SRH_Effort_v2.csv", header=T)
fykeEffort <- tapply(effort$UB_FYKE, effort$Year, sum)
fykeEffort<- c(0, 0, 0, 3, 5, 4) # number of sampling days
pitEffort <- aggregate(effort[,4:5], by=list(effort$Year), sum)
pitEffort <- c(0, 0, 0, 0, 66, 186) # only brasstown antennae
# Bundle data
dat3<-list(y = brasstown.CH.aug, n.occ = dim(brasstown.CH.aug)[2], M=dim(brasstown.CH.aug)[1],
fykeEffort=fykeEffort,
#pitEffort=pitEffort,
tag.dat.aug=as.matrix(tag.dat.aug)) #Sex=c(Sex, rep(NA, nz))
# Initial values
js.multistate.init <- function(ch, nz){
ch[ch==1] <- NA
state <- ch
for (i in 1:nrow(ch)){
n1 <- min(which(ch[i,]>1))
state[i,n1:ncol(ch)] <- 1
state[i, 1:(n1-1)]<- 0
}
# state[state==0] <- NA
# get.first <- function(x) min(which(!is.na(x)))
# get.last <- function(x) max(which(!is.na(x)))
# f <- apply(state, 1, get.first)
# l <- apply(state, 1, get.last)
# for (i in 1:nrow(ch)){
#   state[i,1:f[i]] <- 1
#   if(l[i]!=ncol(ch)) state[i, (l[i]+1):ncol(ch)] <- 2
#   state[i, f[i]] <- 2
# }
state <- rbind(state, matrix(1, ncol = ncol(ch), nrow = nz))
return(state)
}
z.init<-js.multistate.init(CH.du, nz)
inits <- function() {list(z=cbind(rep(NA, nrow(z.init)),z.init[,-1]), mean.phi=runif(1, 0, 1),
p0seine = runif(1, 0, 1),
p0fyke = runif(1, 0, 1),
p0Pit1 = runif(1, 0, 1),
p0Pit2 = runif(1, 0, 1),
#gamma=runif(5, 0, 1)
ER=runif(1, 0, 1)
)}
params <- c("pFyke", "pSeine", "p0Pit1", "p0Pit2", "mean.phi", "ER", "B", "Nsuper", "N", "psi")
ni <- 200
nt <- 1
nb <- 100
nc <- 1
ni <- 150
nt <- 1
nb <- 100
nc <- 1
sr.ms.js.jm13 <- jags.model(data=dat3, inits = inits,
file = "srh_js_phi0_gam0_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
