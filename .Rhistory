z.init[z.init==2]<-NA
head(z.init)
z.init[278,]
z.known[278,]
ms.js.CH.aug[278,]
z.init.KS<-js.multistate.init(CH.du, nz)
z.init.KS[z.init.KS==2]<-NA
head(z.init.KS)
head(z.known)
z.init<-z.known
z.init[is.na(z.init)]<-1
z.init[z.init==2]<-NA
head(z.init)
z.init[278,]
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
z.known
head(z.known)
head(CH.du)
z.known<-rbind(z.known, matrix(NA, ncol=dim(CH.du)[2], nrow=nz))
head(z.known)
nrow(z.knwon)
nrow(z.known)
dat<-dat[dat$Sex!="Unknown",] # remove rows where Sex is "Unknown"
dat$CollectDate<-strptime(dat$CollectDate, format="%d-%b-%y") # convert date format
dat$CollectYear.1<-ifelse(is.na(dat$CollectDate), dat$CollectYear, year(dat$CollectDate))
# Get sex covariate from data
ms.dat.sex<-dcast(dat, dat$Individual_ID~dat$Sex)
for (i in 1:nrow(ms.dat.sex)){
ms.dat.sex$Female[i]<-ifelse(ms.dat.sex$Female[i]!=0, "F", NA)
ms.dat.sex$Male[i]<-ifelse(ms.dat.sex$Male[i]!=0, "M", NA)
#ms.dat.sex$Unknown[i]<-ifelse(ms.dat.sex$Unknown[i]!=0, "U", NA)
}
ms.dat.sex$Sex <- coalesce(ms.dat.sex$Female, ms.dat.sex$Male)
ms.dat.sex$Sex <- ifelse(ms.dat.sex$Sex=="F", 1, 2)
# Read in capture history
ms.cap.hist<-read.csv("Sicklefin Capture History.csv")
# Convert capture history to data for JS model
ms.cap.hist[is.na(ms.cap.hist)]<-1 # if NA, assign 1 for "not seen"
CH.du<-as.matrix(cbind(rep(1, dim(ms.cap.hist)[1]), ms.cap.hist)) # add extra (dummy) sampling occ in the beginning (Kerry and Schaub 2012)
colnames(CH.du)<-NULL
nz<-1000 # augmented individuals
ms.js.CH.aug<-rbind(CH.du, matrix(1, ncol=dim(CH.du)[2], nrow=nz)) # data agumentation
# Jags data
z.known<-CH.du
n1<-n2<-rep(NA, nrow(CH.du))
for(i in 1:nrow(CH.du)){
n1[i]<-min(which(CH.du[i,]>1))
n2[i]<-max(which(CH.du[i,]>1))
z.known[i,n1[i]:n2[i]]<-2
for(j in 1:ncol(CH.du)){
z.known[i,j]<-ifelse(z.known[i,j]==1, NA, z.known[i,j])
}
}
z.known<-rbind(z.known, matrix(NA, ncol=dim(CH.du)[2], nrow=nz))
nrow(z.known)
z.known[282,]
head(z.init)
z.init.KS
head(z.init.KS)
z.init.KS<-js.multistate.init(CH.du, nz)
head(z.init.KS)
z.init
head(z.init)
cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1])
head(z.init)
head(z.init.KS)
z.init.KS<-js.multistate.init(CH.du, nz)
z.init.KS[z.init.KS==2]<-NA
head(z.init.KS)
cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1])
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1]) #,NewCaps=NewCap, Recaps=Recap)
dat3$fykeEffort <- c(0, 0, 0, 2.5, 7, 4) # number of sampling days
dat3$pitEffort <- c(0, 0, 0, 0, 1, 5.25) # ratio of number of sampling days from all antenna in 2017 and 2018, 66 and 347 respectively (Tried to use number of sampling days but model would not run)
z.init.KS<-js.multistate.init(CH.du, nz)
z.init.KS[z.init.KS==2]<-NA
inits <- function() {list(z=cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma") #, "Nsuper", "N", "B", "psi")
ni <- 5000
nt <- 1
nb <- 1000
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
ms.js.CH.aug[278,]
z.init[278,]
z.init.KS[278,]
z.known[278,]
head(z.known)
head(z.init.KS)
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
head(z.known)
head(z.init)
head(z.init.KS)
js.multistate.init <- function(ch, nz){
ch[ch==1] <- NA
state <- ch
for (i in 1:nrow(ch)){
n1 <- min(which(ch[i,]>1))
n2 <- max(which(ch[i,]>1))
state[i,n1:n2] <- 2
}
state[state==0] <- NA
get.first <- function(x) min(which(!is.na(x)))
get.last <- function(x) max(which(!is.na(x)))
f <- apply(state, 1, get.first)
l <- apply(state, 1, get.last)
for (i in 1:nrow(ch)){
state[i,1:f[i]] <- 1
if(l[i]!=ncol(ch)) state[i, (l[i]+1):ncol(ch)] <- 2
state[i, f[i]] <- 2
}
state <- rbind(state, matrix(1, ncol = ncol(ch), nrow = nz))
return(state)
}
z.init.KS<-js.multistate.init(CH.du, nz)
head(z.init.KS)
js.multistate.init <- function(ch, nz){
ch[ch==1] <- NA
state <- ch
for (i in 1:nrow(ch)){
n1 <- min(which(ch[i,]>1))
n2 <- max(which(ch[i,]>1))
state[i,n1:n2] <- 2
}
state[state==0] <- NA
get.first <- function(x) min(which(!is.na(x)))
get.last <- function(x) max(which(!is.na(x)))
f <- apply(state, 1, get.first)
l <- apply(state, 1, get.last)
for (i in 1:nrow(ch)){
state[i,1:f[i]] <- 1
if(l[i]!=ncol(ch)) state[i, (l[i]+1):ncol(ch)] <- 3
state[i, f[i]] <- 2
}
state <- rbind(state, matrix(1, ncol = ncol(ch), nrow = nz))
return(state)
}
z.init.KS<-js.multistate.init(CH.du, nz)
head(z.init.KS)
head(z.known)
js.multistate.init <- function(ch, nz){
ch[ch==1] <- NA
state <- ch
for (i in 1:nrow(ch)){
n1 <- min(which(ch[i,]>1))
n2 <- max(which(ch[i,]>1))
state[i,n1:n2] <- 2
}
state[state==0] <- NA
get.first <- function(x) min(which(!is.na(x)))
get.last <- function(x) max(which(!is.na(x)))
f <- apply(state, 1, get.first)
l <- apply(state, 1, get.last)
for (i in 1:nrow(ch)){
state[i,1:f[i]] <- 1
if(l[i]!=ncol(ch)) state[i, (l[i]+1):ncol(ch)] <- 2
state[i, f[i]] <- 2
}
state <- rbind(state, matrix(1, ncol = ncol(ch), nrow = nz))
return(state)
}
z.init.KS<-js.multistate.init(CH.du, nz)
head(z.init.KS)
z.init.KS[z.known==2]<-NA
head(z.init.KS)
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1]) #,NewCaps=NewCap, Recaps=Recap)
dat3$fykeEffort <- c(0, 0, 0, 2.5, 7, 4) # number of sampling days
dat3$pitEffort <- c(0, 0, 0, 0, 1, 5.25) # ratio of number of sampling days from all antenna in 2017 and 2018, 66 and 347 respectively (Tried to use number of sampling days but model would not run)
inits <- function() {list(z=cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma") #, "Nsuper", "N", "B", "psi")
ni <- 5000
nt <- 1
nb <- 1000
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
ms.js.CH.aug[278,]
ms.dat.sex[-278,]
ms.dat.sex<-dcast(dat, dat$Individual_ID~dat$Sex)
for (i in 1:nrow(ms.dat.sex)){
ms.dat.sex$Female[i]<-ifelse(ms.dat.sex$Female[i]!=0, "F", NA)
ms.dat.sex$Male[i]<-ifelse(ms.dat.sex$Male[i]!=0, "M", NA)
#ms.dat.sex$Unknown[i]<-ifelse(ms.dat.sex$Unknown[i]!=0, "U", NA)
}
ms.dat.sex$Sex <- coalesce(ms.dat.sex$Female, ms.dat.sex$Male)
ms.dat.sex$Sex <- ifelse(ms.dat.sex$Sex=="F", 1, 2)
ms.dat.sex1<-ms.dat.sex[-278,]
ms.cap.hist1<-ms.cap.hist[-278,]
nrow(ms.cap.hist1)
CH.du<-as.matrix(cbind(rep(1, dim(ms.cap.hist)[1]), ms.cap.hist)) # add extra (dummy) sampling occ in the beginning (Kerry and Schaub 2012)
colnames(CH.du)<-NULL
nz<-1000 # augmented individuals
ms.js.CH.aug<-rbind(CH.du, matrix(1, ncol=dim(CH.du)[2], nrow=nz)) # data agumentation
ms.dat.sex<-ms.dat.sex[-278,]
ms.cap.hist<-read.csv("Sicklefin Capture History.csv")
ms.cap.hist[is.na(ms.cap.hist)]<-1 # if NA, assign 1 for "not seen"
ms.cap.hist<-ms.cap.hist[-278,]
CH.du<-as.matrix(cbind(rep(1, dim(ms.cap.hist)[1]), ms.cap.hist)) # add extra (dummy) sampling occ in the beginning (Kerry and Schaub 2012)
colnames(CH.du)<-NULL
nz<-1000 # augmented individuals
ms.js.CH.aug<-rbind(CH.du, matrix(1, ncol=dim(CH.du)[2], nrow=nz)) # data agumentation
z.known<-CH.du
n1<-n2<-rep(NA, nrow(CH.du))
for(i in 1:nrow(CH.du)){
n1[i]<-min(which(CH.du[i,]>1))
n2[i]<-max(which(CH.du[i,]>1))
z.known[i,n1[i]:n2[i]]<-2
for(j in 1:ncol(CH.du)){
z.known[i,j]<-ifelse(z.known[i,j]==1, NA, z.known[i,j])
}
}
z.known<-rbind(z.known, matrix(NA, ncol=dim(CH.du)[2], nrow=nz))
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1]) #,NewCaps=NewCap, Recaps=Recap)
dat3$fykeEffort <- c(0, 0, 0, 2.5, 7, 4) # number of sampling days
dat3$pitEffort <- c(0, 0, 0, 0, 1, 5.25) # ratio of number of sampling days from all antenna in 2017 and 2018, 66 and 347 respectively (Tried to use number of sampling days but model would not run)
z.init<-z.known
z.init[is.na(z.init)]<-1
z.init[z.init==2]<-NA
inits <- function() {list(z=cbind(rep(NA, nrow(z.init)),z.init[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma") #, "Nsuper", "N", "B", "psi")
ni <- 5000
nt <- 1
nb <- 1000
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
js.multistate.init <- function(ch, nz){
ch[ch==1] <- NA
state <- ch
for (i in 1:nrow(ch)){
n1 <- min(which(ch[i,]>1))
n2 <- max(which(ch[i,]>1))
state[i,n1:n2] <- 2
}
state[state==0] <- NA
get.first <- function(x) min(which(!is.na(x)))
get.last <- function(x) max(which(!is.na(x)))
f <- apply(state, 1, get.first)
l <- apply(state, 1, get.last)
for (i in 1:nrow(ch)){
state[i,1:f[i]] <- 1
if(l[i]!=ncol(ch)) state[i, (l[i]+1):ncol(ch)] <- 2
state[i, f[i]] <- 2
}
state <- rbind(state, matrix(1, ncol = ncol(ch), nrow = nz))
return(state)
}
z.init.KS<-js.multistate.init(CH.du, nz)
z.init.KS[z.known==2]<-NA
head(z.init.KS)
inits <- function() {list(z=cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma") #, "Nsuper", "N", "B", "psi")
ni <- 5000
nt <- 1
nb <- 1000
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
sr.ms.js.jc1 <- coda.samples(sr.ms.jm1, params, n.iter=ni)
sr.ms.js.jc1 <- coda.samples(sr.ms.js.jm1, params, n.iter=ni)
out.jc1<-summary(sr.ms.jc1) # model output
out.jc1<-summary(sr.ms.js.jc1) # model output
plot(sr.ms.js.jc1, ask=TRUE)
out.jc1<-summary(sr.ms.js.jc1) # model output
jc1.stats<-out.jc1$statistics # parameter estimates
jc1.quants<-out.jc1$quantiles # 95% confidence intervals
out.jc1
dat<-read.csv("Sicklefin_Capture_Data.csv")
###################################################
## Operational years (occasion) for each gear type
## Seine: 2014-2016 (1-3)
## Fyke: 2016-2018 (3-5)
## PIT: 2017-2018 (4-5)
###################################################
dat<-dat[dat$Sex!="Unknown",] # remove rows where Sex is "Unknown"
dat$CollectDate<-strptime(dat$CollectDate, format="%d-%b-%y") # convert date format
dat$CollectYear.1<-ifelse(is.na(dat$CollectDate), dat$CollectYear, year(dat$CollectDate))
# Get sex covariate from data
ms.dat.sex<-dcast(dat, dat$Individual_ID~dat$Sex)
for (i in 1:nrow(ms.dat.sex)){
ms.dat.sex$Female[i]<-ifelse(ms.dat.sex$Female[i]!=0, "F", NA)
ms.dat.sex$Male[i]<-ifelse(ms.dat.sex$Male[i]!=0, "M", NA)
#ms.dat.sex$Unknown[i]<-ifelse(ms.dat.sex$Unknown[i]!=0, "U", NA)
}
ms.dat.sex$Sex <- coalesce(ms.dat.sex$Female, ms.dat.sex$Male)
ms.dat.sex$Sex <- ifelse(ms.dat.sex$Sex=="F", 1, 2)
ms.dat.sex<-ms.dat.sex[-278,]
# Read in capture history
ms.cap.hist<-read.csv("Sicklefin Capture History.csv")
# Convert capture history to data for JS model
ms.cap.hist[is.na(ms.cap.hist)]<-1 # if NA, assign 1 for "not seen"
ms.cap.hist<-ms.cap.hist[-278,]
CH.du<-as.matrix(cbind(rep(1, dim(ms.cap.hist)[1]), ms.cap.hist)) # add extra (dummy) sampling occ in the beginning (Kerry and Schaub 2012)
colnames(CH.du)<-NULL
nz<-1000 # augmented individuals
ms.js.CH.aug<-rbind(CH.du, matrix(1, ncol=dim(CH.du)[2], nrow=nz)) # data agumentation
# Jags data
z.known<-CH.du
n1<-n2<-rep(NA, nrow(CH.du))
for(i in 1:nrow(CH.du)){
n1[i]<-min(which(CH.du[i,]>1))
n2[i]<-max(which(CH.du[i,]>1))
z.known[i,n1[i]:n2[i]]<-2
for(j in 1:ncol(CH.du)){
z.known[i,j]<-ifelse(z.known[i,j]==1, NA, z.known[i,j])
}
}
z.known<-rbind(z.known, matrix(NA, ncol=dim(CH.du)[2], nrow=nz))
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1]) #,NewCaps=NewCap, Recaps=Recap)
dat3$fykeEffort <- c(0, 0, 0, 2.5, 7, 4) # number of sampling days
dat3$pitEffort <- c(0, 0, 0, 0, 1, 5.25) # ratio of number of sampling days from all antenna in 2017 and 2018, 66 and 347 respectively (Tried to use number of sampling days but model would not run)
# Initial values
js.multistate.init <- function(ch, nz){
ch[ch==1] <- NA
state <- ch
for (i in 1:nrow(ch)){
n1 <- min(which(ch[i,]>1))
n2 <- max(which(ch[i,]>1))
state[i,n1:n2] <- 2
}
state[state==0] <- NA
get.first <- function(x) min(which(!is.na(x)))
get.last <- function(x) max(which(!is.na(x)))
f <- apply(state, 1, get.first)
l <- apply(state, 1, get.last)
for (i in 1:nrow(ch)){
state[i,1:f[i]] <- 1
if(l[i]!=ncol(ch)) state[i, (l[i]+1):ncol(ch)] <- 2
state[i, f[i]] <- 2
}
state <- rbind(state, matrix(1, ncol = ncol(ch), nrow = nz))
return(state)
}
z.init.KS<-js.multistate.init(CH.du, nz)
z.init.KS[z.known==2]<-NA
z.init<-z.known
z.init[is.na(z.init)]<-1
z.init[z.init==2]<-NA
inits <- function() {list(z=cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
# Parameters monitored
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma")
head(z.init.KS)
inits <- function() {list(z=cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma") #, "Nsuper", "N", "B", "psi")
ni <- 10000
nt <- 1
nb <- 5000
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
sr.ms.js.jc1 <- coda.samples(sr.ms.js.jm1, params, n.iter=ni)
plot(sr.ms.js.jc1, ask=TRUE)
out.jc1<-summary(sr.ms.js.jc1) # model output
jc1.stats<-out.jc1$statistics # parameter estimates
jc1.quants<-out.jc1$quantiles # 95% confidence intervals
jc1.stats
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma", "N") #, "Nsuper", "N", "B", "psi")
ni <- 1000
nt <- 1
nb <- 500
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
sr.ms.js.jc1 <- coda.samples(sr.ms.js.jm1, params, n.iter=ni)
plot(sr.ms.js.jc1, ask=TRUE)
head(ms.cap.hist)
get.first<-function(x) min(which(x>1))
f<-apply(ms.cap.hist, 1, get.first)
f
Recap<-NewCap<-rep(NA, 4) # recaps and new caps for 2015-2018
for(n in 1:4){
NewCap[n]<-length(f[f==(n+1)]) # number of newly captured individuals 2015-2018
Recap[n]<-nrow(ms.cap.hist[!is.na(ms.cap.hist[,n+1])&ms.cap.hist[,n+1]>1&!is.na(ms.cap.hist[,n]),]) # number of recaptured individuals
}
NewCap
Recap
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1], NewCaps=NewCap, Recaps=Recap)
js.multistate.init <- function(ch, nz){
ch[ch==1] <- NA
state <- ch
for (i in 1:nrow(ch)){
n1 <- min(which(ch[i,]>1))
n2 <- max(which(ch[i,]>1))
state[i,n1:n2] <- 2
}
state[state==0] <- NA
get.first <- function(x) min(which(!is.na(x)))
get.last <- function(x) max(which(!is.na(x)))
f <- apply(state, 1, get.first)
l <- apply(state, 1, get.last)
for (i in 1:nrow(ch)){
state[i,1:f[i]] <- 1
if(l[i]!=ncol(ch)) state[i, (l[i]+1):ncol(ch)] <- 2
state[i, f[i]] <- 2
}
state <- rbind(state, matrix(1, ncol = ncol(ch), nrow = nz))
return(state)
}
z.init.KS<-js.multistate.init(CH.du, nz)
z.init.KS[z.known==2]<-NA
inits <- function() {list(z=cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma", "N") #, "Nsuper", "N", "B", "psi")
ni <- 1000
nt <- 1
nb <- 500
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
fykeEffort <- c(0, 0, 0, 2.5, 7, 4) # number of sampling days
pitEffort <- c(0, 0, 0, 0, 1, 5.25) # ratio of number of sampling days from all antenna in 2017 and 2018, 66 and 347 respectively (Tried to use number of sampling days but model would not run)
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1], NewCaps=NewCap, Recaps=Recap, fyekEffort=fykeEffort, pitEffort=pitEffort)
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1], NewCaps=NewCap, Recaps=Recap, fyekEffort=fykeEffort, pitEffort=pitEffort)
inits <- function() {list(z=cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma", "N") #, "Nsuper", "N", "B", "psi")
ni <- 1000
nt <- 1
nb <- 500
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1], NewCaps=NewCap, Recaps=Recap, fykeEffort=fykeEffort, pitEffort=pitEffort)
fykeEffort <- c(0, 0, 0, 2.5, 7, 4) # number of sampling days
pitEffort <- c(0, 0, 0, 0, 1, 5.25) # ratio of number of sampling days from all antenna in 2017 and 2018, 66 and 347 respectively (Tried to use number of sampling days but model would not run)
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1], NewCaps=NewCap, Recaps=Recap, fykeEffort=fykeEffort, pitEffort=pitEffort)
inits <- function() {list(z=cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma", "N") #, "Nsuper", "N", "B", "psi")
ni <- 1000
nb <- 500
nt <- 1
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
sr.ms.js.jc1 <- coda.samples(sr.ms.js.jm1, params, n.iter=ni)
plot(sr.ms.js.jc1, ask=TRUE)
out.jc1<-summary(sr.ms.js.jc1) # model output
out.jc1
colnames(CH.du)<-NULL
nz<-1000 # augmented individuals
ms.js.CH.aug<-rbind(CH.du, matrix(1, ncol=dim(CH.du)[2], nrow=nz)) # data agumentation
z.known<-CH.du
n1<-n2<-rep(NA, nrow(CH.du))
for(i in 1:nrow(CH.du)){
n1[i]<-min(which(CH.du[i,]>1))
n2[i]<-max(which(CH.du[i,]>1))
z.known[i,n1[i]:n2[i]]<-2
for(j in 1:ncol(CH.du)){
z.known[i,j]<-ifelse(z.known[i,j]==1, NA, z.known[i,j])
}
}
z.known<-rbind(z.known, matrix(NA, ncol=dim(CH.du)[2], nrow=nz))
get.first<-function(x) min(which(x>1))
f<-apply(ms.cap.hist, 1, get.first)
Recap<-NewCap<-rep(NA, 4) # recaps and new caps for 2015-2018
for(n in 1:4){
NewCap[n]<-length(f[f==(n+1)]) # number of newly captured individuals 2015-2018
Recap[n]<-nrow(ms.cap.hist[!is.na(ms.cap.hist[,n+1])&ms.cap.hist[,n+1]>1&!is.na(ms.cap.hist[,n]),]) # number of recaptured individuals
}
fykeEffort <- c(0, 0, 0, 2.5, 7, 4) # number of sampling days
pitEffort <- c(0, 0, 0, 0, 1, 5.25) # ratio of number of sampling days from all antenna in 2017 and 2018, 66 and 347 respectively (Tried to use number of sampling days but model would not run)
dat3<-list(y = ms.js.CH.aug, z=z.known, n.occ = dim(ms.js.CH.aug)[2], Sex=c(ms.dat.sex$Sex, rep(1, nz/2), rep(2, nz/2)), M=dim(ms.js.CH.aug)[1], fykeEffort=fykeEffort, pitEffort=pitEffort)
js.multistate.init <- function(ch, nz){
ch[ch==1] <- NA
state <- ch
for (i in 1:nrow(ch)){
n1 <- min(which(ch[i,]>1))
n2 <- max(which(ch[i,]>1))
state[i,n1:n2] <- 2
}
state[state==0] <- NA
get.first <- function(x) min(which(!is.na(x)))
get.last <- function(x) max(which(!is.na(x)))
f <- apply(state, 1, get.first)
l <- apply(state, 1, get.last)
for (i in 1:nrow(ch)){
state[i,1:f[i]] <- 1
if(l[i]!=ncol(ch)) state[i, (l[i]+1):ncol(ch)] <- 2
state[i, f[i]] <- 2
}
state <- rbind(state, matrix(1, ncol = ncol(ch), nrow = nz))
return(state)
}
z.init.KS<-js.multistate.init(CH.du, nz)
z.init.KS[z.known==2]<-NA
inits <- function() {list(z=cbind(rep(NA, nrow(z.init.KS)),z.init.KS[,-1]), phi= runif(2, 0, 1), gamma=runif(5, 0, 1))}
params <- c("pFyke", "pSeine", "pPit", "phi", "gamma", "Nsuper", "N", "B", "psi")
ni <- 1000
nt <- 1
nb <- 500
nc <- 3
sr.ms.js.jm1<-jags.model(data=dat3, inits = inits, file = "ms_js_phiSex_pGearEffort.jags",
n.chains = nc, n.adapt = nb, quiet = F)
sr.ms.js.jc1 <- coda.samples(sr.ms.js.jm1, params, n.iter=ni)
plot(sr.ms.js.jc1, ask=TRUE)
out.jc1<-summary(sr.ms.js.jc1) # model output
out.jc1
z.init.KS<-js.multistate.init(CH.du, nz)
z.init.KS
z.init.KS[z.known==2]<-NA
head(z.init.KS)
z.init<-js.multistate.init(CH.du, nz)
z.init[z.known==2]<-NA
rm(list=ls())
